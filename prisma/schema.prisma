// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  enrollments Enrollment[]
  progress   LessonProgress[]
  orders     Order[]
  purchases  Purchase[]

  @@map("users")
}

model Product {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  thumbnail   String?
  price       Float    @default(0)
  type        String   @default("COURSE") // COURSE, EBOOK, PDF
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  modules Module[]
  enrollments Enrollment[]
  orders Order[]
  purchases Purchase[]

  @@map("products")
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  productId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("modules")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  content     String?
  videoUrl    String?
  duration    Int?     // Duration in minutes
  order       Int
  moduleId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  module   Module           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress LessonProgress[]

  @@map("lessons")
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  productId String
  enrolledAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("enrollments")
}

model LessonProgress {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  completedAt DateTime?
  watchTime Int?     // Time watched in seconds
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  productId String
  amount    Float
  status    String   @default("PENDING") // PENDING, COMPLETED, FAILED, CANCELLED
  stripeSessionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  productId String
  amount    Float
  status    String   @default("COMPLETED") // PENDING, COMPLETED, FAILED, REFUNDED
  downloadUrl String? // For e-books/PDFs
  downloadCount Int @default(0)
  stripeSessionId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("purchases")
} 